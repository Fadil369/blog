name: Deploy Nuxt.js Blog to Cloudflare Pages

# Trigger the workflow on every push to any branch
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Set permissions for the workflow
permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper git operations
          fetch-depth: 0

      # Step 2: Setup Node.js environment for Nuxt.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Use latest LTS version of Node.js
          node-version: '20'
          # Enable comprehensive caching for better performance
          cache: 'npm'
          # Specify cache dependency path
          cache-dependency-path: 'package-lock.json'

      # Step 3: Cache node_modules for faster builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .nuxt
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install project dependencies
      - name: Install dependencies
        run: |
          # Check if package.json exists before installing
          if [ -f "package.json" ]; then
            # Use npm ci for faster, reliable, reproducible builds
            npm ci --prefer-offline --no-audit --no-fund
          else
            echo "‚ùå Error: package.json not found!"
            echo "Please ensure your Nuxt.js project is properly configured."
            exit 1
          fi

      # Step 5: Lint and validate code quality
      - name: Lint code
        run: |
          if [ -f "package.json" ] && npm run lint --if-present; then
            echo "‚úÖ Code linting passed"
          else
            echo "‚ö†Ô∏è  No linting configuration found or linting failed"
          fi

      # Step 6: Run tests if available
      - name: Run tests
        run: |
          if [ -f "package.json" ] && npm run test --if-present; then
            echo "‚úÖ Tests passed"
          else
            echo "‚ö†Ô∏è  No tests found or tests failed"
          fi

      # Step 7: Build the static site using Nuxt.js
      - name: Build static site
        run: |
          # Check if package.json exists before building
          if [ -f "package.json" ]; then
            # Generate static site for deployment
            npm run generate
            
            # Verify build output
            if [ -d "dist" ] || [ -d ".output/public" ]; then
              echo "‚úÖ Build completed successfully"
            else
              echo "‚ùå Build failed - no output directory found"
              exit 1
            fi
          else
            echo "‚ùå Error: package.json not found!"
            exit 1
          fi
        env:
          # Set NODE_ENV to production for optimized build
          NODE_ENV: production
          # Enable build optimizations
          NITRO_PRESET: cloudflare-pages

      # Step 8: Deploy to Cloudflare Pages
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          # Use Cloudflare API token from repository secrets
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          # Use Cloudflare account ID from repository secrets
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # Deploy command for Cloudflare Pages with auto-detection
          command: pages deploy ${{ steps.build-output.outputs.directory || 'dist' }} --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME || 'brainsait-blog' }} --compatibility-date=2024-07-03
        env:
          # Additional environment variables for deployment
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # Step 9: Output deployment information
      - name: Output deployment info
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üöÄ Your BrainSAIT blog has been deployed to Cloudflare Pages"
          echo "üìù Repository secrets configured:"
          echo "   ‚úÖ CLOUDFLARE_API_TOKEN: Configured"
          echo "   ‚úÖ CLOUDFLARE_ACCOUNT_ID: Configured"
          echo "   ‚úÖ CLOUDFLARE_PROJECT_NAME: ${CLOUDFLARE_PROJECT_NAME:-'brainsait-blog (default)'}"
          echo ""
          echo "üîó Access your blog at: https://${CLOUDFLARE_PROJECT_NAME:-brainsait-blog}.pages.dev"
          echo "üìä Perfect for sharing healthcare data analysis insights!"

      # Step 10: Comment on PR with deployment info (if PR)
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment Preview Ready!**
              
              Your Nuxt.js blog has been deployed to Cloudflare Pages.
              
              **Preview URL:** https://${process.env.CLOUDFLARE_PROJECT_NAME || 'brainsait-blog'}.pages.dev
              
              **Build Status:** ‚úÖ Success
              **Deployment Time:** ${new Date().toISOString()}
              
              Perfect for showcasing BrainSAIT's healthcare data analysis capabilities! üìä`
            })
